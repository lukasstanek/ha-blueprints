blueprint:
  name: Humidity Controlled Switch Automation
  description: >
    Monitor multiple humidity sensors and control switches based on humidity thresholds.
    Switches turn ON when any sensor drops below minimum threshold.
    Switches turn OFF when all sensors are above maximum threshold.
  domain: automation
  input:
    humidity_sensors:
      name: Humidity Sensors
      description: Select the humidity sensors to monitor
      selector:
        entity:
          multiple: true
          filter:
            - domain: sensor
              device_class: humidity
    target_switches:
      name: Target Switches
      description: Select the switches to control (e.g., humidifiers, fans)
      selector:
        entity:
          multiple: true
          filter:
            - domain: switch
    min_humidity:
      name: Minimum Humidity Threshold
      description: Turn ON switches when any sensor drops below this value
      default: 40
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider
    max_humidity:
      name: Maximum Humidity Threshold  
      description: Turn OFF switches when ALL sensors are above this value
      default: 60
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider

trigger:
  # Turn ON trigger: any sensor drops below minimum
  - platform: numeric_state
    entity_id: !input humidity_sensors
    below: !input min_humidity
    id: "turn_on"
  
  # Turn OFF trigger: any sensor rises above maximum  
  - platform: numeric_state
    entity_id: !input humidity_sensors
    above: !input max_humidity
    id: "turn_off"

variables:
  humidity_sensors: !input humidity_sensors
  target_switches: !input target_switches
  min_humidity: !input min_humidity
  max_humidity: !input max_humidity
  
  # Convert to list if needed
  sensor_list: >
    {% if humidity_sensors is string %}
      {{ [humidity_sensors] }}
    {% else %}
      {{ humidity_sensors }}
    {% endif %}
  
  # Check if ALL sensors are above maximum threshold
  all_sensors_above_max: >
    {% set ns = namespace(all_above=true) %}
    {% for sensor in sensor_list %}
      {% set value = states(sensor) | float(0) %}
      {% if value <= max_humidity %}
        {% set ns.all_above = false %}
      {% endif %}
    {% endfor %}
    {{ ns.all_above }}

action:
  - choose:
      # Turn ON when any sensor is below minimum
      - conditions:
          - condition: trigger
            id: "turn_on"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input target_switches
          - service: logbook.log
            data:
              name: "Humidity Control"
              message: >
                Switches turned ON - {{ trigger.entity_id }} at {{ trigger.to_state.state }}% 
                (below {{ min_humidity }}% threshold)
      
      # Turn OFF only if ALL sensors are above maximum
      - conditions:
          - condition: trigger
            id: "turn_off"
          - condition: template
            value_template: "{{ all_sensors_above_max }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input target_switches
          - service: logbook.log
            data:
              name: "Humidity Control"
              message: >
                Switches turned OFF - All sensors now above {{ max_humidity }}%. 
                Trigger: {{ trigger.entity_id }} at {{ trigger.to_state.state }}%

mode: single
max_exceeded: silent
