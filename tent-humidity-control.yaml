blueprint:
  name: Humidity Controlled Switch Automation
  description: >
    Monitor multiple humidity sensors and control switches based on humidity thresholds.
    Switches turn ON when any sensor drops below minimum threshold.
    Switches turn OFF when all sensors are above maximum threshold.
  domain: automation
  input:
    humidity_sensors:
      name: Humidity Sensors
      description: Select the humidity sensors to monitor
      selector:
        entity:
          multiple: true
          filter:
            - domain: sensor
              device_class: humidity
    target_switches:
      name: Target Switches
      description: Select the switches to control (e.g., humidifiers, fans)
      selector:
        entity:
          multiple: true
          filter:
            - domain: switch
    min_humidity:
      name: Minimum Humidity Threshold
      description: Turn ON switches when any sensor drops below this value
      default: 40
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider
    max_humidity:
      name: Maximum Humidity Threshold  
      description: Turn OFF switches when ALL sensors are above this value
      default: 60
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider

# Simple state-based trigger, but we'll filter in conditions
trigger:
  - platform: state
    entity_id: !input humidity_sensors

variables:
  humidity_sensors: !input humidity_sensors
  target_switches: !input target_switches
  min_humidity: !input min_humidity
  max_humidity: !input max_humidity
  
  # Convert to list if single entity
  sensor_list: >
    {% if humidity_sensors is string %}
      {{ [humidity_sensors] }}
    {% else %}
      {{ humidity_sensors }}
    {% endif %}
  
  # Get all current humidity values
  current_values: >
    {% set values = [] %}
    {% for sensor in sensor_list %}
      {% set value = states(sensor) | float(-1) %}
      {% if value >= 0 %}
        {% set values = values + [value] %}
      {% endif %}
    {% endfor %}
    {{ values }}
  
  # Check if any sensor is below minimum
  any_below_min: >
    {{ current_values | select('lt', min_humidity) | list | length > 0 }}
  
  # Check if all sensors are above maximum  
  all_above_max: >
    {{ current_values | select('gt', max_humidity) | list | length == current_values | length }}
  
  # Get the value that triggered this automation
  trigger_value: "{{ trigger.to_state.state | float(-1) }}"
  
  # Check if trigger crossed a threshold
  crossed_below_min: >
    {{ trigger_value != -1 and trigger_value < min_humidity and 
       (trigger.from_state.state | float(100)) >= min_humidity }}
  
  crossed_above_max: >
    {{ trigger_value != -1 and trigger_value > max_humidity and 
       (trigger.from_state.state | float(0)) <= max_humidity }}

condition:
  # Only proceed if the trigger actually crossed a threshold
  - condition: or
    conditions:
      - condition: template
        value_template: "{{ crossed_below_min }}"
      - condition: template  
        value_template: "{{ crossed_above_max }}"

action:
  - choose:
      # Turn ON: Any sensor crossed below minimum threshold
      - conditions:
          - condition: template
            value_template: "{{ crossed_below_min }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input target_switches
          - service: logbook.log
            data:
              name: "Humidity Control"
              message: >
                Switches turned ON - {{ trigger.entity_id }} dropped to {{ trigger_value }}% 
                (crossed below {{ min_humidity }}% threshold)
      
      # Turn OFF: Sensor crossed above maximum AND all sensors are now above maximum
      - conditions:
          - condition: template
            value_template: "{{ crossed_above_max }}"
          - condition: template
            value_template: "{{ all_above_max }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input target_switches
          - service: logbook.log
            data:
              name: "Humidity Control"
              message: >
                Switches turned OFF - All sensors now above {{ max_humidity }}%. 
                Triggered by {{ trigger.entity_id }} rising to {{ trigger_value }}%

mode: single
max_exceeded: silent
